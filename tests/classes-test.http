### Prerequisite - Create an employee
POST http://{{ip}}/employees
Content-Type: application/json

{
  "username": "ClassesTest1",
  "name": "Admi",
  "surname": "Tsting",
  "degreePre": "Ing.",
  "degreePost": "",
  "abbreviation": "C1",
  "isTeacher": true
}

> {%
  client.test("Employee created", function() {
    client.assert(response.status === 201, "Expected status 201, but received " + response.status);
  });
  client.global.set("employeeId", response.body.employeeId);
%}

### Create a room1
POST http://{{ip}}/rooms
Content-Type: application/json

{
  "name": "ClassTest Room 101",
  "floor": 2,
  "type": "CLASSROOM",
  "studentCapacity": 32,
  "administratorId": {{employeeId}}
}

> {%
  client.test("Room created", function() {
    client.assert(response.status === 201, "Expected status 201, but received " + response.status);
  });
  client.global.set("roomId1", response.body.roomId);
%}

### Create a room2
POST http://{{ip}}/rooms
Content-Type: application/json

{
  "name": "ClassTest Room 102",
  "floor": 2,
  "type": "CLASSROOM",
  "studentCapacity": 32,
  "administratorId": {{employeeId}}
}

> {%
  client.test("Room created", function() {
    client.assert(response.status === 201, "Expected status 201, but received " + response.status);
  });
  client.global.set("roomId2", response.body.roomId);
%}

### Create new class
< {%
  client.global.set("validFrom", new Date(new Date().setMonth(new Date().getMonth() - 1)).toISOString().split("T")[0])
  client.global.set("validTo", new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString().split("T")[0])%}
POST http://{{ip}}/classes
Content-Type: application/json

{
  "name": "CT",
  "validFrom": "{{validFrom}}",
  "validTo": "{{validTo}}",
  "roomId": {{roomId1}},
  "employeeId": {{employeeId}}
}

> {%
  client.test("Status is 201", function () {
    client.assert(response.status === 201, "Expected status 201, but got " + response.status);
  });
  client.test("Response contains 'classId'", function () {
    const json = response.body;
    client.assert(json.hasOwnProperty("classId"), "Response does not contain 'classId'");
    // Save classId for subsequent tests
    client.global.set("createdClassId", json.classId);
  });
%}

### Get all classes
GET http://{{ip}}/classes

> {%
  client.test("Status is 200", function () {
    client.assert(response.status === 200, "Expected status 200, but got " + response.status);
  });
  client.test("Content-Type is application/json", function () {
    const ct = response.headers.valueOf("content-type");
    client.assert(ct.includes("application/json"), "Expected Content-Type to include application/json, but got " + ct);
  });
%}

### Get class by ID
GET http://{{ip}}/classes/{{createdClassId}}

> {%
  client.test("Status is 200", function () {
    client.assert(response.status === 200, "Expected status 200, but got " + response.status);
  });
  client.test("Response contains required properties", function () {
    const json = response.body;
    console.log(json);
    client.assert(json.hasOwnProperty("classId"), "Response does not contain 'classId'");
    client.assert(json.hasOwnProperty("name"), "Response does not contain 'name'");
    client.assert(json.hasOwnProperty("validFrom"), "Response does not contain 'validFrom'");
    client.assert(json.hasOwnProperty("validTo"), "Response does not contain 'validTo'");
    client.assert(json.hasOwnProperty("roomId"), "Response does not contain 'roomId'");
    client.assert(json.hasOwnProperty("employeeId"), "Response does not contain 'employeeId'");
  });
%}

### Get classes at a specific time
< {%
  // add 1 day to validFrom
  client.global.set("attime", new Date(new Date(client.global.get("validFrom")).setDate(new Date(client.global.get("validFrom")).getDate() + 1)).toISOString().split("T")[0]);
 %}
GET http://{{ip}}/classes/at-time/{{attime}}

> {%
  client.test("Status is 200", function () {
    client.assert(response.status === 200, "Expected status 200, but got " + response.status);
  });
  client.test("Response is an array", function () {
    const json = response.body;
    client.assert(Array.isArray(json), "Response is not an array");
  });
%}

### Update class
PUT http://{{ip}}/classes/{{createdClassId}}
Content-Type: application/json

{
  "name": "CT2",
  "validFrom": "{{validFrom}}",
  "validTo": "{{validTo}}",
  "roomId": {{roomId2}},
  "employeeId": {{employeeId}}
}

> {%
  client.test("Status is 200", function() {
    client.assert(response.status === 200, "Expected status 200, but got " + response.status);
  });
  client.test("Response contains required properties", function() {
    const json = response.body;
    client.assert(json.hasOwnProperty("classId"), "Response does not contain 'classId'");
    client.assert(json.hasOwnProperty("name"), "Response does not contain 'name'");
    client.assert(json.hasOwnProperty("validFrom"), "Response does not contain 'validFrom'");
    client.assert(json.hasOwnProperty("validTo"), "Response does not contain 'validTo'");
    client.assert(json.hasOwnProperty("roomId"), "Response does not contain 'roomId'");
    client.assert(json.hasOwnProperty("employeeId"), "Response does not contain 'employeeId'");
  });
  client.test("Returned classId is different from createdClassId", function() {
    const json = response.body;
    client.assert(json.classId !== client.global.get("createdClassId"), "Returned classId is the same as createdClassId");
    client.global.set("classId2", json.classId);
  });
  client.test("Returned name is 'CT2'", function() {
    const json = response.body;
    client.assert(json.name === "CT2", "Expected name 'CT2', but got " + json.name);
  });
  client.test("Returned roomId is roomId2", function() {
    const json = response.body;
    client.assert(json.roomId === client.global.get("roomId2"), "Expected roomId to be " + client.global.get("roomId2") + ", but got " + json.roomId);
  });
%}

### Cleanup - delete class
DELETE http://{{ip}}/classes/{{createdClassId}}

> {%
  client.test("Status is 204", function () {
    client.assert(response.status === 204, "Expected status 204, but got " + response.status);
  });
%}

### Cleanup - delete class2
DELETE http://{{ip}}/classes/{{classId2}}

> {%
  client.test("Status is 204", function () {
    client.assert(response.status === 204, "Expected status 204, but got " + response.status);
  });
%}

### Verify class deletion (GET on deleted ID)
GET http://{{ip}}/classes/{{createdClassId}}

> {%
  client.test("Status is 404", function () {
    client.assert(response.status === 404, "Expected status 404 for a deleted class, but got " + response.status);
  });
%}

### Cleanup - delete room1
DELETE http://{{ip}}/rooms/{{roomId1}}

> {%
  client.test("Room deleted", function() {
    client.assert(response.status === 204, "Expected status 204, but received " + response.status);
  });
%}

### Cleanup - delete room2
DELETE http://{{ip}}/rooms/{{roomId2}}

> {%
  client.test("Room deleted", function() {
    client.assert(response.status === 204, "Expected status 204, but received " + response.status);
  });
%}

### Cleanup - delete employee
DELETE http://{{ip}}/employees/{{employeeId}}

> {%
  client.test("Employee deleted", function() {
    client.assert(response.status === 204, "Expected status 204, but received " + response.status);
  });
%}